#BlueJ class context
comment0.target=APHashMap
comment0.text=\n\ A\ "smart"\ implementation\ of\ a\ HashMap.\n\ \n\ This\ version\ should\ avoid\ collisions\ using\ the\n\ Linear\ Probing\ method\ demonstrated\ outside\ on\ Wednesday.\n\ \n\ You\ should\ ALSO\ double\ the\ size\ of\ the\ array\ (then\ go\ up\ to\ the\ next\ prime)\n\ when\ the\ size\ of\ the\ HashMap\ is\ half\ the\ array\ length\ or\ greater.\n\ This\ only\ affects\ the\ put()\ method,\ since\ this\ is\ the\ only\ method\ that\n\ can\ increase\ the\ array\ size.\n\ \n\ You\ do\ NOT\ have\ to\ worry\ about\ making\ the\ array\ smaller\ if\ there\ are\n\ too\ few\ entries.\n\ \n\ Assignment\:\ Write\ the\ methods\:\n\ get()\n\ put()\n\ remove()\n\ resize()\n\ \n
comment1.params=n
comment1.target=APHashMap(int)
comment10.params=n
comment10.target=boolean\ isPrime(int)
comment10.text=\n\ Helper\ method\ called\ by\ getNextPrime().\n
comment2.params=key
comment2.target=java.lang.Object\ get(java.lang.Object)
comment2.text=\n\ Given\ a\ key,\ returns\ the\ corresponding\ value,\n\ or\ null\ if\ there\ is\ no\ entry\ with\ that\ key.\n
comment3.params=key\ value
comment3.target=java.lang.Object\ put(java.lang.Object,\ java.lang.Object)
comment3.text=\n\ Adds\ a\ new\ entry\ to\ the\ Map.\ If\ key\ was\ \n\ already\ in\ the\ map,\ return\ the\ old\ value.\n\ If\ not,\ return\ null.\n
comment4.params=key
comment4.target=java.lang.Object\ remove(java.lang.Object)
comment4.text=\n\ Removes\ and\ returns\ the\ value\ paired\ with\ key.\n\ If\ there\ is\ no\ value,\ do\ not\ alter\ the\ map,\ and\ return\ null.\n
comment5.params=
comment5.target=void\ resize()
comment5.text=\n\ If\ the\ size\ is\ half\ or\ more\ the\ length\ of\ the\ array,\ make\ the\n\ array\ twice\ as\ long\ (and\ then\ the\ next\ prime\ number).\ Move\n\ all\ the\ entries\ from\ the\ old\ array\ to\ the\ new\ one.\n\ \n\ Note\ --\ the\ hash\ values\ of\ all\ the\ keys\ are\ now\ different,\n\ so\ you\ cannot\ just\ move\ each\ entry\ to\ the\ same\ index\ in\ the\ new\n\ array.\ Instead,\ loop\ over\ the\ old\ array\ and\ move\ the\ entries\ over\n\ using\ the\ put()\ method.\n\ \n\ This\ private\ helper\ method\ should\ be\ called\ from\ put(),\ if\ a\ \n\ new\ entry\ causes\ the\ size\ to\ be\ too\ large.\n
comment6.params=
comment6.target=int\ size()
comment6.text=\n\ Returns\ the\ number\ of\ non-null\ entries\ in\ the\ map.\n\ Note\ this\ is\ NOT\ usually\ equal\ to\ entries.length,\ because\n\ often\ several\ of\ the\ array\ elements\ in\ entries\ are\ null.\n
comment7.params=
comment7.target=void\ printMap()
comment7.text=\n\ Prints\ something\ like,\n\ key1,\ value1\n\ key2,\ value2\n\ .\n\ .\n\ .\n\ \n\ in\ the\ Terminal\ for\ each\ non-null\ entry\n\ in\ the\ map.\ You\ should\ skip\ over\ null\ entries.\n
comment8.params=key
comment8.target=int\ hash(java.lang.Object)
comment8.text=\n\ Returns\ the\ hash\ value\ for\ a\ given\ key.\n
comment9.params=n
comment9.target=int\ getNextPrime(int)
comment9.text=\n\ Private\ helper\ method.\ Given\ a\ positive\n\ integer\ n,\ returns\ the\ next\ prime\ at\ or\ after\ n.\n\ \n\ For\ example\:\n\ getNextPrime(8)\ ->\ 11\n\ getNextPrime(13)\ ->\ 13\n\ getNextPrime(50)\ ->\ 53\n
numComments=11
